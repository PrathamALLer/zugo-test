openapi: 3.0.0
info:
  title: Person API
  version: 1.0.0
  description: API for managing persons.
tags:
  - name: Persons
    description: Operations related to persons
paths:
  /persons:
    post:
      tags:
        - Persons
      summary: Create a new person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: Person created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
                  phone:
                    type: string
                    example: "+1234567890"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "First name is required"

    get:
      tags:
        - Persons
      summary: Retrieve all persons
      responses:
        '200':
          description: A list of persons
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    first_name:
                      type: string
                      example: "John"
                    last_name:
                      type: string
                      example: "Doe"
                    email:
                      type: string
                      example: "john.doe@example.com"
                    phone:
                      type: string
                      example: "+1234567890"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /persons/{id}:
    get:
      tags:
        - Persons
      summary: Retrieve a specific person by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the person to retrieve
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Person found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
                  phone:
                    type: string
                    example: "+1234567890"
        '404':
          description: Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Person not found"

    put:
      tags:
        - Persons
      summary: Update a person by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the person to update
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        '200':
          description: Person updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
                  phone:
                    type: string
                    example: "+1234567890"
        '404':
          description: Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Person not found"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "First name is required"

    delete:
      tags:
        - Persons
      summary: Delete a person by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the person to delete
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Person deleted successfully
        '404':
          description: Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Person not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"